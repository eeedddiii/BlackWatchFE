import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { api } from '../../api/services';
import { VulnerabilityDataSearchParams, PaginatedResponse } from '../../types';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const VulnerabilityDataList = () => {
    const [data, setData] = useState<PaginatedResponse<Record<string, any>> | null>(null);
    const [loading, setLoading] = useState(true);
    const [searchParams, setSearchParams] = useState<VulnerabilityDataSearchParams>({
        page: 0,
        limit: 20,
        sort: '-uploadDate',
    });

    useEffect(() => {
        fetchData();
    }, [searchParams]);

    const fetchData = async () => {
        try {
            setLoading(true);
            const response = await api.data.getVulnerabilityData(searchParams);
            setData(response);
        } catch (error: any) {
            toast.error('데이터를 불러오는데 실패했습니다.');
        } finally {
            setLoading(false);
        }
    };

    // CVSS 점수에 따른 색상
    const getCvssColor = (cvss: string | number) => {
        const score = typeof cvss === 'string' ? parseFloat(cvss) : cvss;
        if (score >= 9.0) return 'bg-red-100 text-red-800';
        if (score >= 7.0) return 'bg-orange-100 text-orange-800';
        if (score >= 4.0) return 'bg-yellow-100 text-yellow-800';
        return 'bg-green-100 text-green-800';
    };

    // CVSS 점수에 따른 레벨
    const getCvssLevel = (cvss: string | number) => {
        const score = typeof cvss === 'string' ? parseFloat(cvss) : cvss;
        if (score >= 9.0) return 'Critical';
        if (score >= 7.0) return 'High';
        if (score >= 4.0) return 'Medium';
        return 'Low';
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center h-64">
                <LoadingSpinner />
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-3xl font-bold text-gray-900">취약점 데이터</h1>
                <p className="mt-2 text-gray-600">최신 보안 취약점 정보를 확인하세요.</p>
            </div>

            {/* 검색 및 필터 */}
            <div className="bg-white p-4 rounded-lg shadow">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <input
                        type="text"
                        placeholder="제목 검색..."
                        className="px-3 py-2 border border-gray-300 rounded-md"
                        onChange={(e) => setSearchParams(prev => ({ ...prev, titleContains: e.target.value, page: 0 }))}
                    />
                    <input
                        type="text"
                        placeholder="호스트 검색..."
                        className="px-3 py-2 border border-gray-300 rounded-md"
                        onChange={(e) => setSearchParams(prev => ({ ...prev, host: e.target.value, page: 0 }))}
                    />
                    <input
                        type="text"
                        placeholder="CVE 검색..."
                        className="px-3 py-2 border border-gray-300 rounded-md"
                        onChange={(e) => setSearchParams(prev => ({ ...prev, cve: e.target.value, page: 0 }))}
                    />
                    <select
                        className="px-3 py-2 border border-gray-300 rounded-md"
                        onChange={(e) => setSearchParams(prev => ({ ...prev, sort: e.target.value, page: 0 }))}
                    >
                        <option value="-uploadDate">최신순</option>
                        <option value="uploadDate">오래된순</option>
                        <option value="-cvss">CVSS 높은순</option>
                        <option value="cvss">CVSS 낮은순</option>
                    </select>
                </div>

                {/* CVSS 범위 필터 */}
                <div className="mt-4 flex items-center space-x-4">
                    <span className="text-sm font-medium text-gray-700">CVSS 점수:</span>
                    <input
                        type="number"
                        placeholder="최소"
                        min="0"
                        max="10"
                        step="0.1"
                        className="w-20 px-2 py-1 border border-gray-300 rounded text-sm"
                        onChange={(e) => setSearchParams(prev => ({
                            ...prev,
                            cvssMin: e.target.value ? parseFloat(e.target.value) : undefined,
                            page: 0
                        }))}
                    />
                    <span className="text-sm text-gray-500">~</span>
                    <input
                        type="number"
                        placeholder="최대"
                        min="0"
                        max="10"
                        step="0.1"
                        className="w-20 px-2 py-1 border border-gray-300 rounded text-sm"
                        onChange={(e) => setSearchParams(prev => ({
                            ...prev,
                            cvssMax: e.target.value ? parseFloat(e.target.value) : undefined,
                            page: 0
                        }))}
                    />
                </div>
            </div>

            {/* 통계 카드 */}
            {data && (
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="flex items-center">
                            <div className="p-2 bg-red-100 rounded-lg">
                                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <p className="text-sm font-medium text-gray-600">총 취약점</p>
                                <p className="text-lg font-semibold text-gray-900">{data.totalElements.toLocaleString()}</p>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="flex items-center">
                            <div className="p-2 bg-red-100 rounded-lg">
                                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <p className="text-sm font-medium text-gray-600">Critical</p>
                                <p className="text-lg font-semibold text-red-600">
                                    {data.content.filter(item => parseFloat(item.cvss || '0') >= 9.0).length}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="flex items-center">
                            <div className="p-2 bg-orange-100 rounded-lg">
                                <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <p className="text-sm font-medium text-gray-600">High</p>
                                <p className="text-lg font-semibold text-orange-600">
                                    {data.content.filter(item => {
                                        const cvss = parseFloat(item.cvss || '0');
                                        return cvss >= 7.0 && cvss < 9.0;
                                    }).length}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="flex items-center">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <p className="text-sm font-medium text-gray-600">현재 페이지</p>
                                <p className="text-lg font-semibold text-gray-900">{data.content.length}</p>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* 데이터 목록 */}
            <div className="bg-white shadow rounded-lg overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                제목
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                호스트
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                CVE
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                CVSS
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                취약점 유형
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                작성자
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                업로드 날짜
                            </th>
                        </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                        {data?.content.map((item) => (
                            <tr key={item.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4">
                                    <Link
                                        to={`/data/vulnerability/${item.id}`}
                                        className="text-blue-600 hover:text-blue-900 font-medium line-clamp-2"
                                    >
                                        {item.title || 'N/A'}
                                    </Link>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {item.host || 'N/A'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {item.cveIds && Array.isArray(item.cveIds) ? (
                                        <div className="space-y-1">
                                            {item.cveIds.slice(0, 3).map((cve: string, index: number) => (
                                                <div key={index} className="text-xs bg-gray-100 px-2 py-1 rounded">
                                                    {cve}
                                                </div>
                                            ))}
                                            {item.cveIds.length > 3 && (
                                                <div className="text-xs text-gray-500">
                                                    +{item.cveIds.length - 3} more
                                                </div>
                                            )}
                                        </div>
                                    ) : (
                                        item.cveIds || 'N/A'
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                    {item.cvss ? (
                                        <div className="flex items-center space-x-2">
                                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getCvssColor(item.cvss)}`}>
                                                {parseFloat(item.cvss).toFixed(1)}
                                            </span>
                                            <span className="text-xs text-gray-500">
                                                {getCvssLevel(item.cvss)}
                                            </span>
                                        </div>
                                    ) : (
                                        <span className="text-sm text-gray-500">N/A</span>
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {item.vulnerabilityClass && Array.isArray(item.vulnerabilityClass) ? (
                                        <div className="flex flex-wrap gap-1">
                                            {item.vulnerabilityClass.slice(0, 2).map((vulnClass: string, index: number) => (
                                                <span key={index} className="inline-flex px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">
                                                    {vulnClass}
                                                </span>
                                            ))}
                                            {item.vulnerabilityClass.length > 2 && (
                                                <span className="text-xs text-gray-500">
                                                    +{item.vulnerabilityClass.length - 2}
                                                </span>
                                            )}
                                        </div>
                                    ) : (
                                        item.vulnerabilityClass || 'N/A'
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {item.author || 'N/A'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {item.uploadDate ? new Date(item.uploadDate).toLocaleDateString() : 'N/A'}
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>

                {/* 페이지네이션 */}
                {data && data.totalPages > 1 && (
                    <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200">
                        <div className="flex-1 flex justify-between sm:hidden">
                            <button
                                onClick={() => setSearchParams(prev => ({ ...prev, page: Math.max(0, prev.page! - 1) }))}
                                disabled={data.first}
                                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                            >
                                이전
                            </button>
                            <button
                                onClick={() => setSearchParams(prev => ({ ...prev, page: prev.page! + 1 }))}
                                disabled={data.last}
                                className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                            >
                                다음
                            </button>
                        </div>
                        <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p className="text-sm text-gray-700">
                                    <span className="font-medium">{data.totalElements}</span>개 중{' '}
                                    <span className="font-medium">{data.number * data.size + 1}</span>-
                                    <span className="font-medium">
                                        {Math.min((data.number + 1) * data.size, data.totalElements)}
                                    </span>개 표시
                                </p>
                            </div>
                            <div>
                                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                                    <button
                                        onClick={() => setSearchParams(prev => ({ ...prev, page: Math.max(0, prev.page! - 1) }))}
                                        disabled={data.first}
                                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                                    >
                                        이전
                                    </button>
                                    <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                        {data.number + 1} / {data.totalPages}
                                    </span>
                                    <button
                                        onClick={() => setSearchParams(prev => ({ ...prev, page: prev.page! + 1 }))}
                                        disabled={data.last}
                                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                                    >
                                        다음
                                    </button>
                                </nav>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* 빈 상태 */}
            {data && data.content.length === 0 && (
                <div className="text-center py-12">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">취약점 데이터가 없습니다</h3>
                    <p className="mt-1 text-sm text-gray-500">
                        검색 조건을 변경하거나 새로운 취약점 데이터가 추가될 때까지 기다려주세요.
                    </p>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityDataList;